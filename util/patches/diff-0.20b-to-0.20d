--- ./pts-0.20b/pts.pl	2002-08-15 11:04:26.000000000 +0900
+++ ./pts-0.20d/pts.pl	2003-01-29 20:06:22.000000000 +0900
@@ -582,6 +582,8 @@
   if ( IsCertifyingClient($s) ) {
     my $pass = StripColors($message);
     my $crypted = $Users{$s}{profile}[PF_PPASSWORD];
+
+    SetBackAuthority($s);
     if ( CheckPassword($pass, $crypted) ) {
       EndCertifyClient($s);
     } else {
@@ -1573,7 +1575,7 @@
         csadded => $Users{$user}{gs}{csadded},
         lifetime => GameTime($ch),
         lines => $Users{$user}{gs}{lines},
-        pieces => $Users{$user}{gs}{pieces},
+        pieces => $Users{$user}{gs}{pieces} - scalar @{$Users{$s}{gs}{sbgiven}},
         specials => $Users{$user}{gs}{specials},
         tetris => $Users{$user}{gs}{tetris},
         ud => '-', # $Users{$user}{gs}{ud},
@@ -3043,6 +3045,8 @@
   my ($ch, $stopped) = @_;
   return unless $ch->{ingame};
 
+  SetGameTimeEnd($ch);
+
   $ch->{ingame} = 0;
   $ch->{paused} = 0;
   RemoveSuddenDeath($ch);
@@ -3086,10 +3090,9 @@
   }
   my $numalive = scalar(keys %alive); # the number of alive teams (players)
 
-  if ( $numalive == 0 # a one-player game or self-survival game has been ended
+  if ( $numalive == 0 # this condition means a one-player game or self-survival game has been ended
        or ($numalive == 1 and @{$ch->{game}{start}} > 1 and $ch->{game}{gametype} != 2) ) {
-    SetGameTimeEnd($ch);
-
+  # game has been ended
     my $wplayers = (values %alive)[0]; # winner players
     if (defined $wplayers) {
       AddPlayerGameInfo($ch, $_) foreach (@$wplayers);
@@ -3546,6 +3549,7 @@
 
 sub SetGameTimeEnd {
   my ($ch) = @_;
+  return undef if defined $ch->{game}{timeend};
   $ch->{game}{timeend} = RealTime();
 }
 
@@ -4140,13 +4144,16 @@
 sub IsCertifyingClient {
   my ($s) = @_;
 
-  return ($Users{$s}{checking}[0] ? 1 : undef);
+  return (defined $Users{$s}{checking}[0] ? 1 : undef);
 }
 
 sub StartCertifyClient {
   my ($s) = @_;
 
-  $Users{$s}{checking}[0] = 1;
+  # authority level is once set to the lowest level;
+  # so not certified client cannot gain his real level until he is certified
+  $Users{$s}{checking}[0] = $Users{$s}{profile}[PF_PAUTHORITY];
+  $Users{$s}{profile}[PF_PAUTHORITY] = 0;
   Send($s, 'pline', 0, [Msg('RegisteredNickEnterPassword')]);
 }
 
@@ -4164,10 +4171,17 @@
   EndCheckingClient($s) unless IsCheckingClient($s);
 }
 
+sub SetBackAuthority {
+  my ($s) = @_;
+
+  # the user's real authority level is set back
+  $Users{$s}{profile}[PF_PAUTHORITY] = $Users{$s}{checking}[0];
+}
+
 sub IsVerifyingClient {
   my ($s) = @_;
 
-  return ($Users{$s}{checking}[1] ? 1 : undef);
+  return (defined $Users{$s}{checking}[1] ? 1 : undef);
 }
 
 sub StartVerifyClient {
